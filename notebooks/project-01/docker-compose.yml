volumes:
  postgres_data:
  grafana_data:
  models:
  mlflow_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/mlflow_data
  minio_data:

networks:
  default:
    name: heart-disease-network
    driver: bridge

services:
  db:
    container_name: heart-disease-db
    image: postgres:${POSTGRES_VERSION:-13}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: heart-disease-adminer

    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - db

  grafana:
    container_name: heart-disease-grafana
    image: grafana/grafana-enterprise:${GRAFANA_VERSION:-latest}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-config:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}

  minio:
    image: minio/minio:${MINIO_VERSION:-latest}
    container_name: heart-disease-minio
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 30s
      timeout: 20s
      retries: 3

  mlflow:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.mlflow
    container_name: heart-disease-mlflow
    image: ${DOCKER_REGISTRY:-localhost}/heart-disease-mlflow:${IMAGE_TAG:-latest}
    ports:
      - "${MLFLOW_PORT:-6060}:6060"
    volumes:
      - ./mlruns:/mlflow/mlruns
      - ./mlflow_data:/data
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
    command: ["/mlflow/start.sh"]
    depends_on:
      - minio

  train:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.train
    container_name: heart-disease-train
    image: ${DOCKER_REGISTRY:-localhost}/heart-disease-train:${IMAGE_TAG:-latest}
    volumes:
      - ./models:/app/models
      - ./mlflow_data:/data
      - ./mlruns:/app/mlruns
      - ./config.toml:/app/config.toml:ro
    environment:
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${S3_REGION_NAME}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - S3_REPORT_PREFIX=${S3_REPORT_PREFIX:-evidently_reports}
    depends_on:
      - minio
      - mlflow

  api:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.api
    container_name: heart-disease-api
    image: ${DOCKER_REGISTRY:-localhost}/heart-disease-api:${IMAGE_TAG:-latest}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./models:/app/models
      - ./config.toml:/app/config.toml:ro
    environment:
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${S3_REGION_NAME}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    depends_on:
      - db
      - minio
      - train
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  streamlit:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.streamlit
    container_name: heart-disease-streamlit
    image: ${DOCKER_REGISTRY:-localhost}/heart-disease-streamlit:${IMAGE_TAG:-latest}
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    volumes:
      - ./config.toml:/app/config.toml:ro
    environment:
      - API_URL=http://api:8000
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
